
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lead {
  id        String  @id @default(cuid())
  name      String
  email     String?
  phone     String?
  status    String // Corresponds to LeadStatusType
  source    String? // Corresponds to LeadSourceOptionType
  assignedTo String? // Corresponds to UserOptionType
  createdBy  String? // Corresponds to UserOptionType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastCommentText   String?
  lastCommentDate   DateTime? // Store as String, or DateTime if you prefer
  nextFollowUpDate  DateTime? // Store as String, or DateTime
  nextFollowUpTime  String? // Store as String
  kilowatt          Float?
  address           String?
  priority          String? // Corresponds to LeadPriorityType
  dropReason        String? // Corresponds to DropReasonType
  clientType        String? // Corresponds to ClientType
  electricityBillUrl String?
  followUpCount Int @default(0)

  followups FollowUp[]
}

model FollowUp {
  id         String   @id @default(cuid())
  type       String // e.g., Call, SMS, Email
  date       DateTime // The date the activity itself occurred
  time       String?
  status     String
  leadStageAtTimeOfFollowUp String?
  comment    String?
  createdBy  String?
  createdAt  DateTime @default(now())

  // Fields for distinguishing Task vs Followup
  followupOrTask String // Will store "Followup" or "Task"

  // Task-specific fields
  taskForUser String?
  taskDate    DateTime? // Due date for the task
  taskTime    String?   // Due time for the task

  // Relation to Lead model
  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId String

  @@index([leadId])
}