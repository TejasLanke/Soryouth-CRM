
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  TechnoSales
  Designing
  Procurement
  ProjectManager
  LiasoningExecutive
  OperationAndMaintainance
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String
  password  String
  role      String   @default("TechnoSales")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  // Relations
  createdLeads         Lead[]        @relation("CreatedLeads")
  assignedLeads        Lead[]        @relation("AssignedLeads")
  createdDroppedLeads  DroppedLead[] @relation("CreatedDroppedLeads")
  assignedDroppedLeads DroppedLead[] @relation("AssignedDroppedLeads")
  createdClients       Client[]      @relation("CreatedClients")
  assignedClients      Client[]      @relation("AssignedClients")
  createdFollowUps     FollowUp[]    @relation("CreatedFollowUps")
  assignedTasks        FollowUp[]    @relation("AssignedTasks")
}

model Lead {
  id        String  @id @default(cuid())
  name      String
  email     String?
  phone     String?
  status    String // Corresponds to LeadStatusType
  source    String? // Corresponds to LeadSourceOptionType
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastCommentText   String?
  lastCommentDate   DateTime? // Store as String, or DateTime if you prefer
  nextFollowUpDate  DateTime? // Store as String, or DateTime
  nextFollowUpTime  String? // Store as String
  kilowatt          Float?
  address           String?
  priority          String? // Corresponds to LeadPriorityType
  dropReason        String? // Corresponds to DropReasonType
  clientType        String? // Corresponds to ClientType
  electricityBillUrl String?
  followUpCount Int @default(0)

  followUps FollowUp[]
  proposals      Proposal[]

  // --- Relations to User ---
  createdById String?
  createdBy   User?   @relation("CreatedLeads", fields: [createdById], references: [id])

  assignedToId String?
  assignedTo   User?   @relation("AssignedLeads", fields: [assignedToId], references: [id])
}

model DroppedLead {
  id                 String     @id @default(cuid())
  name               String
  email              String?
  phone              String?
  status             String     // Will always be 'Lost'
  source             String?
  
  createdAt          DateTime   // The original creation date
  updatedAt          DateTime   // The original updated date
  lastCommentText    String?
  lastCommentDate    DateTime?
  nextFollowUpDate   DateTime?
  nextFollowUpTime   String?
  kilowatt           Float?
  address            String?
  priority           String?
  clientType         String?
  electricityBillUrl String?
  dropReason         String
  dropComment        String?
  droppedAt          DateTime   @default(now())
  followUps          FollowUp[]

  // --- Relations to User ---
  createdById String?
  createdBy   User?   @relation("CreatedDroppedLeads", fields: [createdById], references: [id])

  assignedToId String?
  assignedTo   User?   @relation("AssignedDroppedLeads", fields: [assignedToId], references: [id])
  
}

model Client {
  id                 String    @id @default(cuid())
  name               String
  email              String?
  phone              String?
  status             String
  source             String? // Corresponds to ClientSourceOptionType
  priority           String?
  
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  lastCommentText   String?
  lastCommentDate   DateTime? // Store as String, or DateTime if you prefer
  nextFollowUpDate  DateTime? // Store as String, or DateTime
  nextFollowUpTime  String?
  kilowatt           Float?
  address            String?
  clientType         String?
  electricityBillUrl String?
  followUpCount Int @default(0)
  followUps          FollowUp[]
  proposals      Proposal[]

  // --- Relations to User ---
  createdById String?
  createdBy   User?   @relation("CreatedClients", fields: [createdById], references: [id])

  assignedToId String?
  assignedTo   User?   @relation("AssignedClients", fields: [assignedToId], references: [id])
}

model FollowUp {
  id                       String    @id @default(cuid())
  type                     String
  date                     DateTime
  time                     String?
  status                   String
  leadStageAtTimeOfFollowUp String?
  comment                  String?

  createdAt                DateTime  @default(now())
  followupOrTask           String

  taskDate                 DateTime?
  taskTime                 String?
  
  lead                     Lead?     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId                   String?
  
  client                   Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId                 String?

  droppedLead              DroppedLead? @relation(fields: [droppedLeadId], references: [id], onDelete: Cascade)
  droppedLeadId            String?

  // --- Relations to User ---
  createdById   String?
  createdBy     User?   @relation("CreatedFollowUps", fields: [createdById], references: [id])
  taskForUserId String?
  taskForUser   User?   @relation("AssignedTasks", fields: [taskForUserId], references: [id])

}

model Template {
  id               String   @id @default(cuid())
  name             String
  type             String // "Proposal" or "Document"
  originalDocxPath String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  proposals        Proposal[]
}

model Proposal {
  id                 String    @id @default(cuid())
  proposalNumber     String    @unique

  name               String
  clientType         String
  contactPerson      String
  location           String
  capacity           Decimal
  moduleType         String
  moduleWattage      String
  dcrStatus          String
  inverterRating     Decimal
  inverterQty        Int
  ratePerWatt        Decimal
  proposalDate       DateTime
  baseAmount         Decimal
  cgstAmount         Decimal
  sgstAmount         Decimal
  subtotalAmount     Decimal
  finalAmount        Decimal
  subsidyAmount      Decimal
  pdfUrl             String?
  docxUrl            String?
  requiredSpace      Decimal?
  generationPerDay   Decimal?
  generationPerYear  Decimal?
  unitRate           Decimal?
  savingsPerYear     Decimal?
  laKitQty           Int?
  acdbDcdbQty        Int?
  earthingKitQty     Int?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  client             Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId           String?
  lead               Lead?     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId             String?

  template   Template? @relation(fields: [templateId], references: [id])
  templateId String?
}


model CustomSetting {
  id        String      @id @default(cuid())
  type      SettingType
  name      String
  createdAt DateTime    @default(now())

  @@unique([type, name])
}

enum SettingType {
  LEAD_STATUS
  LEAD_SOURCE
  CLIENT_STATUS
}

enum UserRole {
  Admin
  TechnoSales
  OfficeAdmin
  Designing
  Procurement
  ProjectManager
  LiasoningExecutive
  OperationAndMaintainance
}