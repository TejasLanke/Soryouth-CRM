
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RolePermission {
  id       String @id @default(cuid())
  roleName String
  navPath  String

  @@unique([roleName, navPath])
  @@index([roleName])
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String
  password  String
  role      String   @default("TechnoSales")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  surveys   SiteSurvey[]
  attendances  Attendance[]


  // Relations
  createdLeads         Lead[]        @relation("CreatedLeads")
  assignedLeads        Lead[]        @relation("AssignedLeads")
  createdDroppedLeads  DroppedLead[] @relation("CreatedDroppedLeads")
  assignedDroppedLeads DroppedLead[] @relation("AssignedDroppedLeads")
  createdClients       Client[]      @relation("CreatedClients")
  assignedClients      Client[]      @relation("AssignedClients")
  createdFollowUps     FollowUp[]    @relation("CreatedFollowUps")
  assignedTasks        FollowUp[]    @relation("AssignedTasks")
  expenses             Expense[]
  reviewedExpenses     Expense[]     @relation("ReviewedExpenses")
  dealsCreated         Deal[]  @relation("DealCreatedBy")
  dealsAssigned        Deal[]  @relation("DealAssignedTo")
  generalTasksAssigned GeneralTask[]           @relation("TasksAssignedTo")
  generalTasksCreated  GeneralTask[]           @relation("TasksCreatedBy")
  createdTickets          Ticket[]       @relation("CreatedTickets")
  assignedTickets         Ticket[]       @relation("AssignedTickets")
}

model Lead {
  id        String  @id @default(cuid())
  name      String
  email     String?
  phone     String?
  status    String // Corresponds to LeadStatusType
  source    String? // Corresponds to LeadSourceOptionType
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastCommentText   String?
  lastCommentDate   DateTime? // Store as String, or DateTime if you prefer
  nextFollowUpDate  DateTime? // Store as String, or DateTime
  nextFollowUpTime  String? // Store as String
  kilowatt          Float?
  address           String?
  priority          String? // Corresponds to LeadPriorityType
  dropReason        String? // Corresponds to DropReasonType
  clientType        String? // Corresponds to ClientType
  totalDealValue    Float?
  electricityBillUrls String[] @default([]) 
  followUpCount     Int @default(0)

  followUps FollowUp[]
  proposals      Proposal[]
  siteSurveys        SiteSurvey[]

  // --- Relations to User ---
  createdById String?
  createdBy   User?   @relation("CreatedLeads", fields: [createdById], references: [id])

  assignedToId String?
  assignedTo   User?   @relation("AssignedLeads", fields: [assignedToId], references: [id])

  //Indexing
  @@index([assignedToId])
  @@index([status])
  @@index([createdAt])
}

model DroppedLead {
  id                 String     @id @default(cuid())
  name               String
  email              String?
  phone              String?
  status             String     // Will always be 'Lost'
  source             String?
  
  createdAt          DateTime   // The original creation date
  updatedAt          DateTime   // The original updated date
  lastCommentText    String?
  lastCommentDate    DateTime?
  nextFollowUpDate   DateTime?
  nextFollowUpTime   String?
  kilowatt           Float?
  address            String?
  priority           String?
  clientType         String?
  electricityBillUrls String[] @default([])
  dropReason         String
  dropComment        String?
  droppedAt          DateTime   @default(now())
  followUps          FollowUp[]
  siteSurveys        SiteSurvey[]
  proposals          Proposal[]

  // --- Relations to User ---
  createdById String?
  createdBy   User?   @relation("CreatedDroppedLeads", fields: [createdById], references: [id])

  assignedToId String?
  assignedTo   User?   @relation("AssignedDroppedLeads", fields: [assignedToId], references: [id])
  
}

model Client {
  id                 String    @id @default(cuid())
  name               String
  email              String?
  phone              String?
  status             String
  source             String? // Corresponds to ClientSourceOptionType
  priority           String?
  totalDealValue     Float?  @default(0)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  lastCommentText   String?
  lastCommentDate   DateTime? // Store as String, or DateTime if you prefer
  nextFollowUpDate  DateTime? // Store as String, or DateTime
  nextFollowUpTime  String?
  kilowatt           Float?
  address            String?
  clientType         String?
  electricityBillUrls String[] @default([])
  followUpCount Int @default(0)
  followUps          FollowUp[]
  proposals      Proposal[]
  siteSurveys    SiteSurvey[]
  deals          Deal[]
  tickets        Ticket[]

  // --- Relations to User ---
  createdById String?
  createdBy   User?   @relation("CreatedClients", fields: [createdById], references: [id])

  assignedToId String?
  assignedTo   User?   @relation("AssignedClients", fields: [assignedToId], references: [id])

  //Indexing
  @@index([assignedToId])
  @@index([status])
  @@index([createdAt])
}

model FollowUp {
  id                       String    @id @default(cuid())
  type                     String
  date                     DateTime
  time                     String?
  status                   String
  leadStageAtTimeOfFollowUp String?
  comment                  String?

  createdAt                DateTime  @default(now())
  followupOrTask           String

  taskDate                 DateTime?
  taskTime                 String?
  taskStatus               String?   @default("Open")
  
  lead                     Lead?     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId                   String?
  
  client                   Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId                 String?

  droppedLead              DroppedLead? @relation(fields: [droppedLeadId], references: [id], onDelete: Cascade)
  droppedLeadId            String?
  
  dealId        String?
  deal          Deal?     @relation(fields: [dealId], references: [id], onDelete: Cascade)

  // --- Relations to User ---
  createdById   String?
  createdBy     User?   @relation("CreatedFollowUps", fields: [createdById], references: [id])
  taskForUserId String?
  taskForUser   User?   @relation("AssignedTasks", fields: [taskForUserId], references: [id])

  //Indexing
  @@index([leadId])
  @@index([clientId])
  @@index([droppedLeadId])
  @@index([createdAt])

}

model Template {
  id               String  @id @default(cuid())
  name             String
  type             String // Proposal or DocumentType
  originalDocxPath String
  placeholdersJson String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  documents        GeneratedDocument[]
  proposals        Proposal[]
}

model Proposal {
  id                 String    @id @default(cuid())
  proposalNumber     String    @unique

  name               String
  clientType         String
  contactPerson      String
  location           String
  capacity           Decimal
  moduleType         String
  moduleWattage      String
  dcrStatus          String
  inverterRating     Decimal
  inverterQty        Int
  ratePerWatt        Decimal
  proposalDate       DateTime
  baseAmount         Decimal
  cgstAmount         Decimal
  sgstAmount         Decimal
  subtotalAmount     Decimal
  finalAmount        Decimal
  subsidyAmount      Decimal
  pdfUrl             String?
  docxUrl            String?
  requiredSpace      Decimal?
  generationPerDay   Decimal?
  generationPerYear  Decimal?
  unitRate           Decimal?
  savingsPerYear     Decimal?
  laKitQty           Int?
  acdbDcdbQty        Int?
  earthingKitQty     Int?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  client             Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId           String?
  lead               Lead?     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId             String?
  droppedLead        DroppedLead? @relation(fields: [droppedLeadId], references: [id])
  droppedLeadId      String?  

  template   Template? @relation(fields: [templateId], references: [id])
  templateId String?

  //Indexing
  @@index([leadId])
  @@index([clientId])
  @@index([droppedLeadId])
}


model CustomSetting {
  id        String      @id @default(cuid())
  type      SettingType
  name      String
  createdAt DateTime    @default(now())

  @@unique([type, name])
  @@index([type])
}

enum SettingType {
  LEAD_STATUS
  LEAD_SOURCE
  CLIENT_STATUS
  DOCUMENT_TYPE
  USER_ROLE
}

model SiteSurvey {
  id                  String   @id @default(cuid())
  surveyNumber        String   @unique @default(cuid())
  consumerName        String
  date                DateTime
  consumerCategory    String
  location            String
  numberOfMeters      Int
  meterRating         String?
  meterPhase          String?
  electricityAmount   Float?
  consumerLoadType    String
  roofType            String
  buildingHeight      String
  shadowFreeArea      String
  discom              String
  sanctionedLoad      String?
  remark              String?
  electricityBillFiles String[] @default([])
  status              String   @default("Pending")

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  leadId              String?
  lead                Lead?    @relation(fields: [leadId], references: [id], onDelete: Cascade)

  clientId            String?
  client              Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  droppedLeadId       String?
  droppedLead         DroppedLead? @relation(fields: [droppedLeadId], references: [id], onDelete: Cascade)

  surveyorId          String
  surveyor            User     @relation(fields: [surveyorId], references: [id])

  //Indexing
  @@index([leadId])
  @@index([clientId])
  @@index([droppedLeadId])
  @@index([surveyorId])
}

model GeneratedDocument {
  id           String   @id @default(cuid())
  clientName   String
  documentType String
  pdfUrl       String
  docxUrl      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  formData   String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String

  //Indexing
  @@index([documentType])
}

model Expense {
  id           String    @id @default(cuid())
  date         DateTime  @map("date")
  endDate      DateTime? @map("end_date")
  category     String
  amount       Decimal   @db.Decimal(10, 2)
  description  String
  receiptUrl   String?   @map("receipt_url")
  status       String    @default("Pending") // Pending, Approved, Rejected
  submittedAt  DateTime  @default(now()) @map("submitted_at")
  reviewedAt   DateTime? @map("reviewed_at")

  user         User      @relation(fields: [userId], references: [id])
  userId       String    @map("user_id")

  reviewedBy   User?     @relation("ReviewedExpenses", fields: [reviewedById], references: [id])
  reviewedById String?   @map("reviewed_by_id")

  @@index([userId])
  @@index([reviewedById])
}

model Attendance {
  id               String    @id @default(cuid())
  punchInTime      DateTime  @default(now())
  punchOutTime     DateTime?
  punchInLocation  String
  punchOutLocation String?
  workDuration     Int? // Stored in minutes

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId, punchInTime])
}

model Deal {
    id            String   @id @default(cuid())
    clientName    String
    contactPerson String
    email         String?
    phone         String?
    pipeline      String
    stage         String
    dealFor       String?
    source        String?
    dealValue     Float  @default(0)
    poWoDate      DateTime
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    amcDurationInMonths Int?
    amcEffectiveDate    DateTime?

    clientId    String?
    client      Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull)
    
    createdById String?
    createdBy   User?    @relation("DealCreatedBy", fields: [createdById], references: [id])
    
    assignedToId String?
    assignedTo   User?    @relation("DealAssignedTo", fields: [assignedToId], references: [id])

    followUps     FollowUp[]
    tickets       Ticket[]
    generalTasks  GeneralTask[]
}

model Ticket {
  id            String      @id @default(cuid())
  clientName    String
  mobileNo      String
  email         String?
  address       String
  subject       String
  description   String
  status        String      // Open, On Hold, Closed
  priority      String      // High, Medium, Low
  dueDate       DateTime
  ticketFor     String?     // Product/Deal description
  remark        String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  clientId      String
  client        Client      @relation(fields: [clientId], references: [id])
  
  dealId        String?
  deal          Deal?       @relation(fields: [dealId], references: [id])

  createdById   String
  createdBy     User        @relation("CreatedTickets", fields: [createdById], references: [id])

  assignedToId  String?
  assignedTo    User?       @relation("AssignedTickets", fields: [assignedToId], references: [id])
}

model GeneralTask {
  id         String   @id @default(cuid())
  comment    String
  taskDate   DateTime
  priority   String   // Low, Medium, High
  status     String   // Pending, In Progress, Completed, Failed
  reason     String?
  amcTaskId  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  assignedToId String
  assignedTo User     @relation("TasksAssignedTo", fields: [assignedToId], references: [id], onDelete: Cascade)

  createdById String?
  createdBy   User?    @relation("TasksCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)

  dealId        String?
  deal          Deal?     @relation(fields: [dealId], references: [id], onDelete: Cascade)
}